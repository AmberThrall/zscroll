#!/usr/bin/env python3
import sys
import argparse
from time import sleep
import unicodedata

parser = argparse.ArgumentParser()
# allow for a positional argument or piping into
parser.add_argument("scrolltext", nargs="?", help="text to scroll;" +
                    " will print in place if not longer than scroll length;" +
                    " can be read from stdin," +
                    " e.g 'echo text | zscroll'",
                    default=sys.stdin.read() if not sys.stdin.isatty() else "")
parser.add_argument("-l", "--length", type=int, default=40,
                    help="length of scrolling text (default: 40)")
parser.add_argument("-b", "--beforetext", default="",
                    help="padding text to be displayed to the " +
                    "left of the scrolling text (default: \"\")")
parser.add_argument("-a", "--aftertext", default="",
                    help="padding text to be displayed to the " +
                    "right of the scrolling text (default: \"\")")
parser.add_argument("-d", "--delay", type=float, default=0.4,
                    help="delay for scrolling update (default: 0.4)")
# no args
parser.add_argument("-n", "--newline", action="store_true",
                    help="Print a newline after each update (default: no)")
parser.add_argument("-c", "--characterlength", action="store_true",
                    help="Count length by characters instead of considering" +
                    " fullwidth characters to be length 2 (default: no)")
parser.add_argument("-f", "--fullwidth", action="store_true",
                    help="If fullwidth characters are found in the given scrolltext," +
                    " convert all characters to be fullwidth (default: no)")
args = parser.parse_args()


def visualLen(text):
    visualLength = 0
    for char in text:
        width = unicodedata.east_asian_width(char)
        if width == 'W' or width == 'F':
            visualLength += 2
        else:
            visualLength += 1
    return visualLength


def makeVisualLen(chosenLength, text):
    visualLength = 0
    final = ""
    for char in text:
        if visualLength < chosenLength:
            width = unicodedata.east_asian_width(char)
            if width == 'W' or width == 'F':
                visualLength += 2
            else:
                visualLength += 1
            final += char
        else:
            break
    if visualLength == chosenLength + 1:
        final = final[:-1] + " "
    return final


# http://stackoverflow.com/a/24544674/2744245
HALFWIDTH_TO_FULLWIDTH = str.maketrans(
    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&()*+,-./:;<=>?@[]^_`{|}~',
    '０１２３４５６７８９ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ！゛＃＄％＆（）＊＋、ー。／：；〈＝〉？＠［］＾＿‘｛｜｝～')


def makeFullwidthChar(char):
    return char.translate(HALFWIDTH_TO_FULLWIDTH)


def maybeMakeFullwidthString(string):
    alter = False
    final = ""
    for char in string:
        width = unicodedata.east_asian_width(char)
        if width == 'W' or width == 'F':
            alter = True
            break
    if alter:
        final = final.join(makeFullwidthChar(char) for char in string)
    else:
        final = string
    return final


def scrollText():
    text = args.scrolltext.rstrip('\n')
    scroll = True
    # only scroll if text is longer than scrolling area
    if args.characterlength:
        if len(text) <= args.length:
            scroll = False
    else:
        if visualLen(text) <= args.length:
            scroll = False
    while True:
        if args.characterlength:
            midText = text[:args.length]
        elif args.fullwidth:
            stopIndex = args.length // 2
            midText = maybeMakeFullwidthString(text)[:stopIndex]
        else:
            midText = makeVisualLen(args.length, text)
        displayedText = (args.beforetext + midText +
                         args.aftertext)
        if args.newline:
            print(displayedText, flush=True)
        else:
            print(displayedText, end='\r', flush=True)
        # rotate text
        if scroll:
            text = text[1:] + text[0]
        sleep(args.delay)


def main():
    if len(args.scrolltext) > 0:
        try:
            scrollText()
        except KeyboardInterrupt:
            sys.exit(0)
    else:
        parser.print_help()


if __name__ == "__main__": main()
